colnames(familyDf) <- c('family','count')
ggplot(familyDf, aes(x=Group.1, y=x)) +
geom_segment(aes(x=Group.1, xend=Group.1, y=0, yend=x), color=ifelse(familyDf$Group.1=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$Group.1=='2','orange','grey'),
size=ifelse(familyDf$Group.1=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(familyDf, aes(x=family, y=count)) +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
familyDf <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$family), FUN=sum)
familyDf$Group.1 <- factor(familyDf$Group.1)
colnames(familyDf) <- c('family','count')
ggplot(familyDf, aes(x=family, y=count)) +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
familyDf2 <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$family), FUN=sum)
familyDf2$Group.1 <- factor(familyDf2$Group.1)
colnames(familyDf2) <- c('family','count')
ggplot(familyDf2, aes(x=family, y=count)) +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
familyDf2 <- aggregate(hotelDf$is_canceled, by=list(hotelDf$family), FUN=sum)
rm(familyDf2)
familyDf2 <- aggregate(hotelDf$is_canceled, by=list(hotelDf$family), FUN=sum)
familyDf2$Group.1 <- factor(familyDf2$Group.1)
colnames(familyDf2) <- c('family','count')
ggplot(familyDf2, aes(x=family, y=count)) +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(familyDf, aes(x=family, y=count)) +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(familyDf2, aes(x=family, y=count)) +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
p1 <- ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
p2 <- ggplot(familyDf2, aes(x=family, y=count)) +
ggtitle('Cancellation Status by Year')+
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
runApp('app - 복사본.R')
ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_time(family)
ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_reveal(year)
ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_reveal(family)
rm(familyDf)
familyDf <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$family), FUN=sum)
#familyDf$Group.1 <- factor(familyDf$Group.1)
colnames(familyDf) <- c('family','count')
ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_reveal(family)
ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_time(family)
p1 <- ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_time(family)
p2 <- ggplot(familyDf2, aes(x=family, y=count)) +
ggtitle('Cancellation Status by family')+
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(familyDf, aes(x=family, y=count)) +
ggtitle('Reservation Status by family') +
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) + transition_time(family)
p2 <- ggplot(familyDf2, aes(x=family, y=count)) +
ggtitle('Cancellation Status by family')+
geom_segment(aes(x=family, xend=family, y=0, yend=count), color=ifelse(familyDf$family=='2','orange','grey'),
size = 1) +
geom_point(color = ifelse(familyDf$family=='2','orange','grey'),
size=ifelse(familyDf$family=='2',4,2), alpha=.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1
runApp('app - 복사본.R')
runApp('app - 복사본.R')
plot_ly(countryDf, x = ~reserved, y = ~canceled, type = 'scatter', mod = 'markers',
marker = list(size = ~(reserved+canceled)/800, opacity = 0.5))
runApp()
runApp('app - 복사본.R')
runApp('app - 복사본.R')
"
# 호텔별 예약/취소 현황
hotel.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotel.reserved <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotelnameDf <- rbind(hotel.reserved,hotel.canceled)
colnames(hotelnameDf) <- c('hotel', 'count')
hotelnameDf$status <- c('reserved','reserved','canceled','canceled')
p <- ggplot(hotelnameDf, aes(x=hotel, y=count, fill=status)) +
ggtitle('Reservation/Cancellation Status by Hotel') +
geom_bar(position='stack', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_stack(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
coord_cartesian(ylim = c(0,82000)) +
theme(panel.background = element_blank(),
text = element_text(face='bold'),
plot.title = element_text(face='bold'),
axis.title.x = element_text(size=15, face='bold'),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=15, face='bold'),
legend.position = 'top')
p<-ggplot(hotelnameDf, aes(x=hotel, y=count, fill=sort(status,decreasing = F))) +
geom_bar(position='dodge', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_stack(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
enter_grow() +
transition_states(status, transition_length = 4, state_length = 1)
animate(p, duration = 10,
fps = 20,
width = 400,
height = 400,
renderer = gifski_renderer())"
library(ggplot2)
library(plotly)
library(dplyr)
library(extrafont)
library(plotly)
library(gganimate)
getwd()
hotelDf <- read.csv('./hotel_bookings.csv')
sum(is.na(hotelDf))
hotelDf <- na.omit(hotelDf)
sum(is.na(hotelDf))
hotelDf <- hotelDf[hotelDf$country!='NULL',]
hotelDf <- hotelDf[hotelDf$adr>0,]
# 호텔별 예약/취소 현황
"hotel.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotel.reserved <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotelnameDf <- rbind(hotel.reserved,hotel.canceled)
colnames(hotelnameDf) <- c('hotel', 'count')
hotelnameDf$status <- c('reserved','reserved','canceled','canceled')
p <- ggplot(hotelnameDf, aes(x=hotel, y=count, fill=status)) +
ggtitle('Reservation/Cancellation Status by Hotel') +
geom_bar(position='stack', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_stack(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
coord_cartesian(ylim = c(0,82000)) +
theme(panel.background = element_blank(),
text = element_text(face='bold'),
plot.title = element_text(face='bold'),
axis.title.x = element_text(size=15, face='bold'),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=15, face='bold'),
legend.position = 'top')
p<-ggplot(hotelnameDf, aes(x=hotel, y=count, fill=sort(status,decreasing = F))) +
geom_bar(position='dodge', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_stack(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
enter_grow() +
transition_states(status, transition_length = 4, state_length = 1)
animate(p, duration = 10,
fps = 20,
width = 400,
height = 400,
renderer = gifski_renderer())"
# 년도별 예약/취소 현황
year.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$arrival_date_year), FUN=sum)
year.reserved <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$arrival_date_year), FUN=sum)
"
year.canceled$fraction <- year.canceled$x / sum(year.canceled$x)
year.canceled$ymax <- cumsum(year.canceled$fraction)
year.canceled$ymin <- c(0, head(year.canceled$ymax, n=-1))
year.canceled$labelPosition <- (year.canceled$ymax+year.canceled$ymin) / 2
year.canceled$label <- paste0(year.canceled$Group.1, '\n count: ', year.canceled$x)
year.reserved$fraction <- year.reserved$x / sum(year.reserved$x)
year.reserved$ymax <- cumsum(year.reserved$fraction)
year.reserved$ymin <- c(0, head(year.reserved$ymax, n=-1))
year.reserved$labelPosition <- (year.reserved$ymax+year.reserved$ymin) / 2
year.reserved$label <- paste0(year.reserved$Group.1, '\n count: ', year.reserved$x)
library(gridExtra)
p1 <- ggplot(year.canceled, aes(ymax=ymax,ymin=ymin,xmax=4,xmin=3, fill=Group.1))+
ggtitle('Cancellation Status by Year') +
geom_rect() + geom_text(x=2.3, aes(y=labelPosition, label=label), size =4)+
coord_polar(theta='y') +
scale_fill_viridis(discrete = F) +
xlim(c(1,4)) + theme_void() +
theme(legend.position = 'none', plot.title=element_text(face='bold'))
p2 <- ggplot(year.reserved, aes(ymax=ymax,ymin=ymin,xmax=4,xmin=3, fill=Group.1))+
ggtitle('Reservation Status by Year') +
geom_rect() + geom_text(x=2.3, aes(y=labelPosition, label=label), size =4)+
coord_polar(theta='y') +
scale_fill_viridis(discrete = F) +
xlim(c(1,4)) + theme_void() +
theme(legend.position = 'none',plot.title=element_text(face='bold'))
"
d1 <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$arrival_date_year, hotelDf$arrival_date_month), FUN=sum)
d2 <- aggregate(hotelDf$is_canceled, by=list(hotelDf$arrival_date_year, hotelDf$arrival_date_month), FUN=sum)
d1$Group.1 <- factor(d1$Group.1)
d2$Group.1 <- factor(d2$Group.1)
colnames(d1) <- c('year','month','count')
colnames(d2) <- c('year','month','count')
p1 <- ggplot(data=d1, aes(x=count, group=year, fill=year)) +
ggtitle('Reservation Status by Year') +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
p2 <- ggplot(data=d2, aes(x=count, group=year, fill=year)) +
ggtitle('Cancellation Status by Year') +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
d1 <- aggregate(hotelDf$is_canceled+!hotelDf$is_canceled, by=list(hotelDf$arrival_date_year, hotelDf$arrival_date_month), FUN=sum)
d2 <- aggregate(hotelDf$is_canceled, by=list(hotelDf$arrival_date_year, hotelDf$arrival_date_month), FUN=sum)
d1$Group.1 <- factor(d1$Group.1)
d2$Group.1 <- factor(d2$Group.1)
colnames(d1) <- c('year','month','count')
colnames(d2) <- c('year','month','count')
p1 <- ggplot(data=d1, aes(x=count, group=year, fill=year)) +
ggtitle('Reservation Status by Year') +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
p2 <- ggplot(data=d2, aes(x=count, group=year, fill=year)) +
ggtitle('Cancellation Status by Year') +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
esquisse:::esquisser()
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Most basic violin chart
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
library(ggplot2)
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Most basic violin chart
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
d1
ggplot(d1, aes(x=tear, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
ggplot(d1, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
runApp()
ggplot(d1, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() +
geom_density(alpha =.4)
ggplot(d1, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(alpha=.4)
ggplot(d1, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(alpha=.5)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(alpha=.5)
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(alpha=.5)
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(position='dodge', alpha=0.5, outlier.colour='transparent')
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(position='dodge', alpha=0.5, outlier.colour='transparent')
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, outlier.colour='transparent') + theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, outlier.colour='transparent')
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5) + theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count') + theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count') + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA) + theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count') + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim=TRUE) + theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA) + theme_ipsum() +
geom_jitter(height = 0, width = 0.1)
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) + theme_ipsum() +
geom_jitter(height = 0, width = 0.1)
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) + theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) +
stat_summary( fun.data="mean_sdl", fun.args=list(mult=1), geom="pointrange",color="black" ) +
theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) +
theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
p1 <- ggplot(d1, aes(x=year, y=count, fill=year)) +
ggtitle('Reservation Status by year') +
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) +
theme_ipsum()
p2 <- ggplot(d2, aes(x=year, y=count, fill=year)) +
ggtitle('Cancellation Status by year')+
geom_violin(position='dodge', alpha=0.5, scale = 'count', color=NA, trim = F) + theme_ipsum()
grid.arrange(arrangeGrob(p1, p2, ncol=2), nrow = 1)
runApp()
runApp()
